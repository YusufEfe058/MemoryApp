{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yusuf\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\Uygulama-2\\\\memory-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport MemoryCard from './components/MemoryCard';\n\n//KARTLARIN LİSTESİ BURADA TANIMLANIR;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardList = [{\n  \"path\": \"/img/1.jpeg\",\n  matched: false\n}, {\n  \"path\": \"/img/2.jpeg\",\n  matched: false\n}, {\n  \"path\": \"/img/3.jpeg\",\n  matched: false\n}, {\n  \"path\": \"/img/4.jpeg\",\n  matched: false\n}, {\n  \"path\": \"/img/5.jpeg\",\n  matched: false\n}, {\n  \"path\": \"/img/6.jpeg\",\n  matched: false\n}];\n\n//-------------------------------------\n\n//------------------------------------------------------\n\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [selectedOne, setSelectedOne] = useState(null);\n  const [selectedTwo, setSelectedTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n  const [score, setScore] = useState(0);\n\n  //-------------------------------------------------------\n\n  //KARTLAR RASTGELE SIRALANIR;\n\n  const prepareCards = () => {\n    const sortedCards = [...cardList, ...cardList].sort(() => 0.5 - Math.random()).map(card => ({\n      ...card,\n      id: Math.random()\n    }));\n    setCards(sortedCards);\n    setSelectedOne(null);\n    setSelectedTwo(null);\n    setScore(0);\n  };\n\n  //-------------------------------\n\n  //EĞER 1. KART SEÇİLMİŞSE 2. NİN SEÇİLMESİNİ SAĞLAR, İLKİ SEÇİLMEDİYSE İLKİNİ SEÇER\n\n  const handleSelected = card => {\n    selectedOne ? setSelectedTwo(card) : setSelectedOne(card);\n  };\n\n  //----------------------------------------------------------------------------------\n\n  useEffect(() => {\n    prepareCards();\n  }, []);\n\n  //EĞER 2 SEÇİM DE YAPILDIYSA 3. BİR SEÇİM YAPILMASI ENGELLENİR (SETDİSABLED);\n\n  useEffect(() => {\n    if (selectedOne && selectedTwo) {\n      setDisabled(true);\n\n      //----------------------------------------------------------------------------\n\n      //KARTLAR EŞLEŞİYORSA DURUM GÜNCELLENİR (MATCH = TRUE);\n\n      if (selectedOne.path === selectedTwo.path) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.path === selectedOne.path) {\n              return {\n                ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        setScore(prevScore => prevScore + 10);\n        resetState();\n\n        //SÜRE SONUNDA YENİ SEÇİM;\n      } else {\n        setTimeout(() => {\n          resetState();\n        }, 1000);\n      }\n    }\n  }, [selectedOne, selectedTwo]);\n\n  //--------------------------------\n\n  //SEÇİMDEN SONRA TEKRAR SEÇİM SAĞLANIR;\n\n  const resetState = () => {\n    setSelectedOne(null);\n    setSelectedTwo(null);\n    setDisabled(false);\n    setScore(prevScore => prevScore + 1);\n  };\n\n  //--------------------------------------\n\n  //UYGULAMANIN GÖRÜNTÜSÜ;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memory App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: prepareCards,\n      children: \"Oyunu Ba\\u015Flat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(MemoryCard, {\n        card: card,\n        handleSelected: handleSelected,\n        disabled: disabled,\n        rotated: card === selectedOne || card === selectedTwo || card.matched\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n\n//------------------------------------------------------\n_s(App, \"vYMt8m8h+GzQs3lorfElEsVdNhg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","MemoryCard","jsxDEV","_jsxDEV","cardList","matched","App","_s","cards","setCards","selectedOne","setSelectedOne","selectedTwo","setSelectedTwo","disabled","setDisabled","score","setScore","prepareCards","sortedCards","sort","Math","random","map","card","id","handleSelected","path","prevCards","prevScore","resetState","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","rotated","_c","$RefreshReg$"],"sources":["C:/Users/yusuf/OneDrive/Masaüstü/Uygulama-2/memory-app/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport MemoryCard from './components/MemoryCard';\n\n\n//KARTLARIN LİSTESİ BURADA TANIMLANIR;\n\nconst cardList = [\n  { \"path\": \"/img/1.jpeg\", matched: false },\n  { \"path\": \"/img/2.jpeg\", matched: false },\n  { \"path\": \"/img/3.jpeg\", matched: false },\n  { \"path\": \"/img/4.jpeg\", matched: false },\n  { \"path\": \"/img/5.jpeg\", matched: false },\n  { \"path\": \"/img/6.jpeg\", matched: false }\n];\n\n//-------------------------------------\n\n//------------------------------------------------------\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [selectedOne, setSelectedOne] = useState(null);\n  const [selectedTwo, setSelectedTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n  const [score, setScore] = useState(0);\n\n//-------------------------------------------------------\n\n//KARTLAR RASTGELE SIRALANIR;\n\n  const prepareCards = () => {\n\n    const sortedCards = [...cardList, ...cardList]\n      .sort(() => 0.5 - Math.random())\n      .map((card) => ({ ...card, id: Math.random() }));\n\n    setCards(sortedCards);\n    setSelectedOne(null);\n    setSelectedTwo(null);\n    setScore(0);\n  }\n\n//-------------------------------\n\n//EĞER 1. KART SEÇİLMİŞSE 2. NİN SEÇİLMESİNİ SAĞLAR, İLKİ SEÇİLMEDİYSE İLKİNİ SEÇER\n\n  const handleSelected = (card) => {\n    selectedOne ? setSelectedTwo(card) : setSelectedOne(card);\n  }\n\n//----------------------------------------------------------------------------------\n\n  useEffect(() => {\n    prepareCards();\n  }, []);\n\n//EĞER 2 SEÇİM DE YAPILDIYSA 3. BİR SEÇİM YAPILMASI ENGELLENİR (SETDİSABLED);\n\n  useEffect(() => {\n    if(selectedOne && selectedTwo) {\n      setDisabled(true);\n\n//----------------------------------------------------------------------------\n\n//KARTLAR EŞLEŞİYORSA DURUM GÜNCELLENİR (MATCH = TRUE);\n\n      if(selectedOne.path === selectedTwo.path) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if(card.path === selectedOne.path) {\n              return { ...card, matched: true }\n            } else {\n              return card;\n            }\n          });\n        });\n        setScore(prevScore => prevScore + 10);\n        resetState();\n\n//SÜRE SONUNDA YENİ SEÇİM;\n\n      } else {\n        setTimeout(() => {\n          resetState();\n        }, 1000);\n      }\n    }\n  }, [selectedOne, selectedTwo])\n\n//--------------------------------\n\n//SEÇİMDEN SONRA TEKRAR SEÇİM SAĞLANIR;\n\n  const resetState = () => {\n    setSelectedOne(null);\n    setSelectedTwo(null);\n    setDisabled(false);\n    setScore(prevScore => prevScore + 1);\n  }\n\n//--------------------------------------\n\n\n//UYGULAMANIN GÖRÜNTÜSÜ;\n\n  return (\n    <div className=\"container\">\n      <h1>Memory App</h1>\n      <button onClick={prepareCards}>Oyunu Başlat</button>\n      <p>Score: {score}</p>\n\n      <div className=\"card-grid\">\n        {\n          cards.map(card => (\n            <MemoryCard \n              card={card} \n              key={card.id} \n              handleSelected={handleSelected}\n              disabled = {disabled}\n              rotated = {card === selectedOne || card === selectedTwo || card.matched}\n            />\n          ))\n        }\n      </div>\n    </div>\n  );\n}\n\n//------------------------------------------------------\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}